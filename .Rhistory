library(dplyr); library(tidyr)
# 1. Merges the training and the test sets to create one data set
############################## Merges the training sets
# Loading data
# Each row identifies the subject (person) who performed the activity for each window
# sample. Its range is from 1 to 30.
subject_train <- read.table("./UCI HAR Dataset-2/train/subject_train.txt")
# Training set
X_train <- read.table("./UCI HAR Dataset-2/train/X_train.txt")
# Training tabels (1-6) Refer to activity_labels.txt
y_train <- read.table("./UCI HAR Dataset-2/train/y_train.txt")
training_set <- cbind(subject_train, y_train, X_train)
names(training_set)[1:2] <- c("subject", "activity")
############################## Merges the test sets
# loading data
subject_test <- read.table("./UCI HAR Dataset-2/test/subject_test.txt")
X_test <- read.table("./UCI HAR Dataset-2/test/X_test.txt")
y_test <- read.table("./UCI HAR Dataset-2/test/y_test.txt")
test_set <- cbind(subject_test, y_test, X_test)
names(test_set)[1:2] <- c("subject", "activity")
############################## Merges training and test sets
merged_set <- rbind(training_set, test_set)
# rm(list = ls()[2:9])
##########################################################################################
# 2. Extracts only the measurements on the mean and standard deviation for each
# measurement.
# Loading features
features <- read.table("./UCI HAR Dataset-2/features.txt")
column_numbers <- grep("mean\\(\\)|std\\(\\)", features$V2) + 2
selected_columns <- merged_set %>%
select(1, 2, column_numbers)
##########################################################################################
# 3. Uses descriptive activity names to name the activities in the data set
activity_names <- read.table("./UCI HAR Dataset-2/activity_labels.txt")
names(activity_names) <- c("activity", "attribute")
merged_with_activity_name <- inner_join(activity_names, selected_columns, by="activity")
##########################################################################################
# 4. Appropriately labels the data set with descriptive variable names.
names(merged_with_activity_name)[4:ncol(merged_with_activity_name)] <-
grep("mean\\(\\)|std\\(\\)", features$V2, value = TRUE)
merged_with_variable_name <- select(merged_with_activity_name, 2:69)
names(merged_with_variable_name)[1] <- "activity"
##########################################################################################
# 5. From the data set in step 4, creates a second, independent tidy data set with the
# average of each variable for each activity and each subject.
tidy_data <- tbl_df(merged_with_variable_name) %>%
group_by(activity, subject) %>%
summarize_each(funs(mean))
write.table(tidy_data, "Tidy_Data.txt", row.names = FALSE)
library(lattice); library(datasets)
xyplot(Ozone ~ Wind, data = airquality)
airquality
str(airquality)
?transform
airquality <- transform(airquality, Month = factor(Month))
xyplot(Ozone ~ Wind | Month, airquality, layout = c(5,1))
set.seed(10)
x <- rnorm(100)
f <- rep(0:1, each = 50)
y <- x + f - f * x + rnorm(100, sd = 50)
f
xyplot(x ~ y | f, layout = c(2, 1))
f <- factor(f, labels = c("Group 1", "Group 2"))
xyplot(x ~ y | f, layout = c(2, 1))
xyplot(x ~ y | f, panel = function(x, y, ...){
panel.xyplot(x, y, ...)
panel.abline(h = median(y), lty = 2)
})
xyplot(x ~ y | f, panel = function(x, y, ...){
panel.abline(h = median(y), lty = 2)
})
xyplot(x ~ y | f, panel = function(x, y, ...){
panel.xyplot(x, y, ...)
panel.abline(h = median(y), lty = 2)
})
xyplot(x ~ y | f, panel = function(x, y, ...){
panel.xyplot(x, y, ...)
panel.abline(h = median(y), lty = 2)
panel.lmline(x, y, col = 2)
})
library(ggplot2)
str(mpg)
mpg
head(mpg)
data(mpg)
mpg
head(mpg)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"))
qplot(hwy, data = mpg, fill = drv)
qplot(displ, hwy, data = mpg, facets = .~drv)
qplot(displ, hwy, data = mpg, facets = drv~.)
?facet
qplot(hwy, data = mpg, facets = ~.drv)
qplot(hwy, data = mpg, facets = .~drv)
qplot(hwy, data = mpg, facets = drv~.)
str(maacs)
?theme_bw
expression(PM[2.5])
expression("log" * PM[2.5])
swirl()
library()
swirl()
library(swirl)
swirl()
install_from_swirl("Exploratory_Data_Analysis")
library(swirl)
swirl()
swirl()
head(pollution)
dim(pollution)
summarise(pollution$pm25)
summary(pollution$pm25)
quantile(pollution$pm25)
quantile(ppm)
boxplot(ppm, col = "blue")
abline(h = 12)
hist(ppm, col = "green")
rug(ppm)
low
high
hist(ppm, col = "green", breaks = 100)
rug(ppm)
hist(ppm, col = "green")
abline(v = 12)
abline(v = 12, lwd = 2)
abline(v = 12, lwd = 4)
abline(v = 12, lwd = 4, col = "magenta")
abline(v = median(ppm), lwd = 4, col = "magenta")
names(pollution)
reg <- pollution$region
reg <- table(pollution$region)
reg
barplot(reg, col = "wheat", main = "Number of Countries in Each Region")
barplot(reg, col = "wheat", main = "Number of Counties in Each Region")
boxplot(pm25 ~ region, data = pollution, col = "red")
par(mfrow=c(2,1), mar=c(4,4,2,1))
subset(pollution, region == "east")
east <- subset(pollution, region == "east")
head(east)
hist(east$pm25, col = "green")
hist(west$pm25, col = "green")
hist(subset(pollution, region=="west")$pm25, col = "green")
with(pollution, plot(pm25, latitude))
with(pollution, plot(latitude, pm25))
abline(h = 12)
abline(h = 12, lwd = 2, lty = 2)
with(pollution, plot(latitude, pm25, col = "region"))
with(pollution, plot(latitude, pm25, col = region))
with(pollution, plot(latitude, ppm, col = region))
plot(pollution$latitude, ppm, col = pollution$region)
abline(h = 12, lwd = 2, lty = 2)
par(mfrow = c(1,2), mar = c(5, 4, 2, 1))
west <- subset(pollution, region == "west")
plot(west$latitude, west$pm25, main = "West")
plot(east$latitude, east$pm25, main = "Eest")
plot(east$latitude, east$pm25, main = "East")
?Devices
plot(arguments, eruptions)
with(faithful, plot(eruptions, waiting))
with(faithful, plot(eruptions, waiting, main = "Old Faithful Geyser data"))
title(main = "Old Faithful Geyser data")
dev.cur()
pdf(file = "myplot.pdf")
with(faithful, plot(eruptions, waiting, main = "Old Faithful Geyser data"))
with(faithful, plot(eruptions, waiting)
)
title(main = "Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting)
)
title(main = "Old Faithful Geyser data")
dev.copy(png, geyserplot.png)
dev.copy(png, "geyserplot.png")
dev.copy(png, file = "geyserplot.png")
dev.off()
swirl()
swirl()
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
data(nlme)
setwd("~/Documents/R works/Exploratory-Data-Analysis")
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?trellis.par.set
?splom
?par()
qplot(Wind, Ozone, data = airquality, facets = .~factor(Month))
airquality <- transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = .~Month)
library(datasets); data(airquality)
airquality
airquality <- transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = .~Month)
library(datasets); data(airquality)
airquality <- transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = .~Month)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + geom_smooth("loess")
qplot(votes, rating, data = movies) + geom_smooth()
